permissions:
  contents: read
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      influxdb:
        image: influxdb:2.7
        ports:
          - 8086:8086
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: test-user
          DOCKER_INFLUXDB_INIT_PASSWORD: test-pass
          DOCKER_INFLUXDB_INIT_ORG: test-org
          DOCKER_INFLUXDB_INIT_BUCKET: test-bucket
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token
        options: >-
          --health-cmd "curl -f http://localhost:8086/ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Read Python version
      id: python-version
      run: echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Lint with flake8 (if available)
      run: |
        # Install flake8 for basic linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Run unit tests
      run: |
        python -m pytest tests/test_datastore.py -v

    - name: Wait for InfluxDB to be ready
      run: |
        echo "Waiting for InfluxDB to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:8086/ping; do sleep 2; done'

    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v -m integration
      env:
        # Set environment variables for integration tests
        INFLUX_DEV_URL: http://localhost:8086
        INFLUX_DEV_ORG: test-org
        INFLUX_DEV_BUCKET: test-bucket
        INFLUX_DEV_TOKEN: test-token

    - name: Run all tests with coverage (optional)
      run: |
        pip install pytest-cov
        python -m pytest tests/ --cov=mlrun_influx_store --cov-report=xml --cov-report=term-missing
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Read Python version
      id: python-version
      run: echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
  docker-image:
    name: Build & Push runtime image (py3.11.13 + mlrun 1.9.2 + this pkg)
    runs-on: ubuntu-latest
    needs: test
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner || toLowerCase() }}/mlrun-influx-store-runtime
      PY_VERSION_TAG: 3.11.13
      MLRUN_VERSION: 1.9.2
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        # (optional, helps if you later want multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Dockerfile (inline)
        run: |
          cat > Dockerfile <<'EOF'
          FROM python:3.11.13-slim

          ENV PIP_NO_CACHE_DIR=1 \
              PYTHONDONTWRITEBYTECODE=1 \
              PYTHONUNBUFFERED=1 \
              DEBIAN_FRONTEND=noninteractive

          RUN apt-get update && apt-get install -y --no-install-recommends \
                git build-essential curl \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          COPY . /app

          # Pin mlrun, then install this repo as a package
          RUN python -m pip install --upgrade pip \
              && pip install "mlrun==1.9.2" \
              && pip install -e . \
              && python - <<'PY'
          import sys, mlrun
          print("Python:", sys.version)
          print("MLRun:", mlrun.__version__)
          PY

          # Reasonable default command
          CMD ["python", "-c", "import mlrun; print('mlrun', mlrun.__version__)"]
          EOF

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:py${{ env.PY_VERSION_TAG }}-mlrun${{ env.MLRUN_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max